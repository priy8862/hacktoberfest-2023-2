Given a string S that contains only digits (0-9) and an integer target, return all possible strings to insert the binary operator ' + ', ' - ', or ' * ' between the digits of S so that the resultant expression evaluates to the target value.

Note:

Operands in the returned expressions should not contain leading zeros. For example, 2 + 03 is not allowed whereas 20 + 3 is fine. It is allowed to not insert any of the operators.

If no solution is found, return an empty string array.
Example 1:

Input:
S = "123"
target = 6
Output: { "1*2*3", "1+2+3"}
Explanation: Both "1*2*3" and "1+2+3" evaluate to 6.

Example 2:

Input:
S = "3456237490"
target = 9191
Output: { } 
Explanation: There are no expressions that can be created from "3456237490"  to evaluate to 9191.

Example 3:

Input:
S = "12"
target = 12
Output: { "12"} 
Explanation: S itself matches the target. No other strings are possible.



def addOperators(S, target):
    def backtrack(start, path, value, prev):
        if start == len(S):
            if value == target:
                result.append(path)
            return

        for end in range(start + 1, len(S) + 1):
            num_str = S[start:end]
            if len(num_str) > 1 and num_str[0] == '0':
                continue
            num = int(num_str)

            if start == 0:
                backtrack(end, num_str, num, num)
            else:
                backtrack(end, path + '+' + num_str, value + num, num)
                backtrack(end, path + '-' + num_str, value - num, -num)
                backtrack(end, path + '*' + num_str, value - prev + (prev * num), prev * num)

    result = []
    backtrack(0, "", 0, 0)
    return result

# Example usage:
if __name__ == "__main__":
    S = "123"
    target = 6
    expressions = addOperators(S, target)
    print(expressions)  # Output: ["1+2+3", "1*2*3"]
